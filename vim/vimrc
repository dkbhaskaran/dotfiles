nnoremap <SPACE> <Nop>
let mapleader=","

" Disable vi compatibility (emulation of old bugs)
set nocompatible

" turn filetype detection off and, even if it's not strictly
" necessary, disable loading of indent scripts and filetype plugins
filetype off
filetype plugin indent off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Plugin 'preservim/nerdtree'
" Nerd Tree shortcut
let NERDTreeShowHidden=1                            " Always show hidden files
map <C-n> :NERDTreeToggle<CR>                       " Ctrl-N for toggle

Plugin 'octol/vim-cpp-enhanced-highlight'
" vim-cpp-enhanced-highlight settings
let g:cpp_class_scope_highlight = 1                 " Highlighting of class scope
let g:cpp_member_variable_highlight = 1             " Highlighting of member variables
let g:cpp_class_decl_highlight = 1                  " Highlighting of class names in declarations
let g:cpp_experimental_template_highlight = 1       " Highlight template functions.

Plugin 'christoomey/vim-tmux-navigator'
Plugin 'majutsushi/tagbar'
Plugin 'pseewald/nerdtree-tagbar-combined.git'
map <C-c> :ToggleNERDTreeAndTagbar<CR>              " Ctrl-C for focus

Plugin 'ntpeters/vim-better-whitespace'
" whitespace setting 'StripWhitespace' to remove all whitespaces
let g:better_whitespace_enabled=1
" let g:strip_whitespace_on_save=1

Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'yuki-ycino/fzf-preview.vim', { 'branch': 'release', 'do': ':UpdateRemotePlugins' }
" Plugin 'airblade/vim-rooter.git'
" FZF setting to behave at ctrlp
let g:fzf_action = {
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit'
      \ }
nnoremap <c-p> :Files<cr>

Plugin 'altercation/vim-colors-solarized'
" solarized settings
let g:solarized_bold = 0
let g:solarized_contrast = "low"
let g:solarized_termcolors = 256

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Airline settings
let g:airline_powerline_fonts = 1
let g:airline_left_alt_sep = '>'
let g:airline_right_alt_sep = '<'
let g:airline#extensions#tabline#enabled = 1
let g:lightline = {
  \ 'colorscheme': 'edge',
  \ }

Plugin 'mhinz/vim-startify.git'
Plugin 'francoiscabrol/ranger.vim'
Plugin 'liuchengxu/vim-which-key.git'

Plugin 'rhysd/vim-clang-format'
let g:clang_format#code_style = 'llvm'

Plugin 'machakann/vim-highlightedyank'
Plugin 'airblade/vim-gitgutter'

Plugin 'tpope/vim-fugitive'
Plugin 'will133/vim-dirdiff'

Plugin 'sickill/vim-monokai'
Plugin 'morhetz/gruvbox'
Plugin 'sainnhe/edge'
Plugin 'endel/vim-github-colorscheme'
Plugin 'NLKNguyen/papercolor-theme'

Plugin 'jiangmiao/auto-pairs'
Plugin 'lifepillar/vim-solarized8'

let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1

" Install cpplint using pip install
Plugin 'vim-syntastic/syntastic'
let g:syntastic_cpp_checkers = ['cpplint']
let g:syntastic_c_checkers = ['cpplint']
let g:syntastic_cpp_cpplint_exec = 'cpplint'
" The following two lines are optional. Configure it to your liking!
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

if executable('ctags')
  Plugin 'ludovicchabant/vim-gutentags'
  let  g:gutentags_ctags_tagfile = '.tags'
  let  s:vim_tags = expand('~/.cache/tags')
  let  g:gutentags_cache_dir = s:vim_tags
  let  g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
  let  g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
  let  g:gutentags_ctags_extra_args += ['--c-kinds=+px']
endif

Plugin 'regedarek/ZoomWin'

let $NVIM_PYTHON_LOG_FILE="/tmp/nvim_log"
let $NVIM_PYTHON_LOG_LEVEL="DEBUG"

" Turn on filetype detection, indent scripts and filetype plugins on
" Need not to do filetype on as the below is superfluous
filetype plugin indent on

" Essential settings
set nu                                              " enable line numbers
set softtabstop=2
set shiftwidth=2
set expandtab

set autoindent                                      " use indentation of previous line
set smartindent                                     " use intelligent indentation for C
set tabstop=4                                       " tab width is 4 spaces
set expandtab                                       " expand tabs to spaces
set showmatch                                       " highlight matching braces
set hlsearch
set encoding=utf-8
set cursorline
set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:↲,extends:⟩,precedes:⟨
"set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,
set nolist
set colorcolumn=80

" read/write files when switching buffers
set autoread
set autowrite

" Capitals invoke case-insensitive search
set ignorecase
set smartcase

" Persist undo even after vim/neovim is closed and reopened
set undodir=~/.vim/undo
set undofile
" Custom mappings
"

if (has("termguicolors"))
  set termguicolors
endif

map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

nnoremap <Leader>r :%s///g<LEFT><LEFT>
nnoremap <Leader>rc :%s///gc<LEFT><LEFT><LEFT>

xnoremap <Leader>r :%s///g<LEFT><LEFT>
xnoremap <Leader>rc :%s///gc<LEFT><LEFT><LEFT>

call which_key#register('<Space>', "g:which_key_map")
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
vnoremap <silent> <leader> :<c-u>WhichKeyVisual '<Space>'<CR>

let g:which_key_map =  {}
let g:which_key_map['w'] = {
      \ 'name' : '+windows' ,
      \ 'w' : ['<C-W>w'     , 'other-window']          ,
      \ 'd' : ['<C-W>c'     , 'delete-window']         ,
      \ '-' : ['<C-W>s'     , 'split-window-below']    ,
      \ '|' : ['<C-W>v'     , 'split-window-right']    ,
      \ '2' : ['<C-W>v'     , 'layout-double-columns'] ,
      \ 'h' : ['<C-W>h'     , 'window-left']           ,
      \ 'j' : ['<C-W>j'     , 'window-below']          ,
      \ 'l' : ['<C-W>l'     , 'window-right']          ,
      \ 'k' : ['<C-W>k'     , 'window-up']             ,
      \ 'H' : ['<C-W>5<'    , 'expand-window-left']    ,
      \ 'J' : ['resize +5'  , 'expand-window-below']   ,
      \ 'L' : ['<C-W>5>'    , 'expand-window-right']   ,
      \ 'K' : ['resize -5'  , 'expand-window-up']      ,
      \ '=' : ['<C-W>='     , 'balance-window']        ,
      \ 's' : ['<C-W>s'     , 'split-window-below']    ,
      \ 'v' : ['<C-W>v'     , 'split-window-below']    ,
      \ '?' : ['Windows'    , 'fzf-window']            ,
      \ }

let g:which_key_map.b = {
       \ 'name' : '+buffer' ,
       \ 'd' : 'delete-buffer',
       \ 'f' : 'first-buffer',
       \ 'l' : 'last-buffer',
       \ 'n' : 'next-buffer',
       \ 'p' : 'previous-buffer',
       \ 'b' : 'fzf-buffer',
       \ 'x' : 'delete-buffer-and-window',
       \ }

"let g:which_key_map['g'] = {
"      \ 'name' : '+git/version-control' ,
"      \ 'b' : 'fugitive-blame',
"      \ 'c' : 'commits-for-current-buffer',
"      \ 'C' : 'fugitive-commit',
"      \ 'd' : 'fugitive-diff',
"      \ 'e' : 'fugitive-edit',
"      \ 'l' : 'fugitive-log',
"      \ 'm' : 'fugitive-move',
"      \ 'r' : 'fugitive-read',
"      \ 's' : 'fugitive-status',
"      \ 'w' : 'fugitive-write',
"      \ 'p' : 'fugitive-pull',
"      \ 'P' : 'fugitive-push',
"      \ 't' : 'toggle-gutter',
"      \ 'h' : {
"           \ 'name' : '+hunks',
"           \ 'n' : 'next',
"           \ 'p' : 'prev',
"           \}
"      \ }

if has('nvim')
  " nvim don't set numbers for the terminal
  au TermOpen * setlocal nonumber norelativenumber

  tnoremap <Esc> <C-\><C-n>

  tnoremap <A-h> <C-\><C-n><C-w>h
  tnoremap <A-j> <C-\><C-n><C-w>j
  tnoremap <A-k> <C-\><C-n><C-w>k
  tnoremap <A-l> <C-\><C-n><C-w>l

  nnoremap <A-h> <C-w>h
  nnoremap <A-j> <C-w>j
  nnoremap <A-k> <C-w>k
  nnoremap <A-l> <C-w>l

  hi! TermCursorNC ctermfg=15 guifg=#fdf6e3 ctermbg=14 guibg=#93a1a1 cterm=NONE gui=NONE
endif

" Setup for ripgrep
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  nnoremap <Leader>g :silent lgrep<Space>
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>

map <C-K> :pyf ~/.vim/clang-format.py<CR>
imap <C-K> <c-o>:pyf ~/.vim/clang-format.py<CR>

" Use tab to shift to next buffer and SHIFT-tab to previous buffer
nnoremap  <silent>   <tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bnext<CR>
nnoremap  <silent> <s-tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bprevious<CR>

" Reset behaviour of ctrl + arrow keys
execute "set <xUp>=\e[1;*A"
execute "set <xDown>=\e[1;*B"
execute "set <xRight>=\e[1;*C"
execute "set <xLeft>=\e[1;*D"

" ctags settings
nnoremap <C-]> g<C-]>

set backupdir=~/.vim/backup/                        " In case you delete something accidently
set directory=~/.vim/swp/                           " Get rid of swap files too

set encoding=utf-8                                  " The encoding displayed.
set fileencoding=utf-8                              " The encoding written to file.

" Spell check for markdown files and git commit.
" Help - Add a word to dictionary using 'zg' and 'z=' to correct.
autocmd FileType gitcommit setlocal spell
autocmd BufRead,BufNewFile *.md setlocal spell
set spellfile=~/.vim/spell/en.utf-8.add

function! TerminalPreviewMarkdown()
	vert new % | terminal ! mdv %
endfu

map <silent> <leader>m :call TerminalPreviewMarkdown()<CR>

syntax on
set background=dark
colorscheme edge
"colorscheme gruvbox
"colorscheme tender
"colorscheme koehler
"colorscheme desert
"colorscheme solarized

" Diff mode works better with light backgroud
if &diff
    colorscheme PaperColor
    set background=light
    let g:airline_theme='papercolor'
end

" Upgrade the pynvim to latest
" pip2 install --upgrade pynvim
" pip3 install --upgrade pynvim
"
" Update GDB package using
" nvim +UpdateRemotePlugins +qall
" Install node, yarn from https://github.com/nodesource/distributions/blob/master/README.md#deb
